<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

    <!-- enable-matrix-variables attribute that should be set to true.
    By default it is set to false. or matrix variables can't be used-->
    <mvc:annotation-driven enable-matrix-variables="true" ignore-default-model-on-redirect="true"/>

    <context:annotation-config />

    <!--配置文件使用如下方式扫描bean-->
    <context:component-scan base-package="mvc" use-default-filters="true">
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
       <!-- <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>-->
    </context:component-scan>

    <mvc:default-servlet-handler/>
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/"/>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--interceptor : 不起作用 ？？-->
    <bean id="handlerMapping"
          class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="officeHoursInterceptor"/>
            </list>
        </property>
    </bean>

    <bean id="officeHoursInterceptor"
          class="mvc.advice.TimeBasedAccessInterceptor">
        <property name="openingTime" value="9"/>
        <property name="closingTime" value="15"/>
    </bean>

    <!--multipart (file upload) support-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="100000"/>

    </bean>

    <!--
    Spring MVC处理异常有3种方式：
        （1）使用Spring MVC提供的简单异常处理器 SimpleMappingExceptionResolver；
        （2）实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器；
        （3）使用@ExceptionHandler注解实现异常处理；
     -->

    <!--
        (1) : SimpleMappingExceptionResolver
    -->
    <!--<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        &lt;!&ndash; 定义默认的异常处理页面，当该异常类型的注册时使用 &ndash;&gt;
        <property name="defaultErrorView" value="ex-error"></property>
        &lt;!&ndash; 定义异常处理页面用来获取异常信息的变量名，默认名为exception &ndash;&gt;
        <property name="exceptionAttribute" value="ex"></property>
        &lt;!&ndash; 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 &ndash;&gt;
        <property name="exceptionMappings">
            <props>
                <prop key="mvc.model.BusinessException">ex-error-business</prop>
                <prop key="mvc.model.ParameterException">ex-error-parameter</prop>
            </props>
        </property>
    </bean>-->

    <!--
        (2) : 实现HandlerExceptionResolver 接口自定义异常处理器
    -->
    <!--<bean id="exceptionHandler" class="mvc.model.MyExceptionHandler"/>-->

    <!--
        RMI
    -->
    <!-- server -->
    <bean id="fileUtil" class="jmi_upload.inter.FileUtilImpl">
        <!-- any additional properties, maybe a DAO? -->
    </bean>
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter">
        <property name="serviceName" value="IFileUtilServer" />
        <property name="service" ref="fileUtil"/>
        <property name="serviceInterface" value="jmi_upload.inter.FileUtil"/>
        <!-- defaults to 1099 -->
        <property name="registryPort" value="1199" />
    </bean>
    <!-- client -->
    <!--<bean id="fileUtilService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="rmi://127.0.0.1:1199/IFileUtilServer" />
        <property name="serviceInterface" value="jmi_upload.inter.FileUtil" />
    </bean>

    <bean id="fileUtilClient" class="jmi_upload.client.FileUtilClient">
        <property name="fileUtil" ref="fileUtilService" />
    </bean>-->


    <!--
        Hessian
    -->
    <!--<bean id="hello" class="hessian.inter.IHelloImpl" />
    &lt;!&ndash;  使用HessianServiceExporter 将普通bean导出成Hessian服务&ndash;&gt;
    <bean id="httpRequestHandlerAdapter" class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>
    <bean name="/helloHession" class="org.springframework.remoting.caucho.HessianExporter">
        &lt;!&ndash;  需要导出的目标bean&ndash;&gt;
        <property name="service" ref="hello" />
        &lt;!&ndash;  Hessian服务的接口&ndash;&gt;
        <property name="serviceInterface" value="hessian.inter.IHello"/>
    </bean>-->

    <bean id="hello" class="hessian.inter.IHelloImpl" />
    <!--  使用HessianServiceExporter 将普通bean导出成Hessian服务-->
    <bean name="helloHessian" class="org.springframework.remoting.caucho.HessianServiceExporter">
        <!--  需要导出的目标bean-->
        <property name="service" ref="hello" />
        <!--  Hessian服务的接口-->
        <property name="serviceInterface" value="hessian.inter.IHello"/>
    </bean>
    <!--
        burlap
    -->
    <bean id="foodService" class="burlap.inter.FoodServiceImpl"></bean>
    <bean id="FoodService" class="org.springframework.remoting.caucho.BurlapServiceExporter">
        <property name="serviceInterface">
            <value>burlap.inter.FoodService</value>
        </property>
        <property name="service" ref="foodService"/>
    </bean>

    <!--
        httpInvoker
    -->
    <bean id="httpInvoker" class="httpInvoker.HttpInvokerServiceImpl" />
    <bean name="httpInvokerService" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
        <property name="service" ref="httpInvoker"/>
        <property name="serviceInterface" value="httpInvoker.HttpInvokerService" />
    </bean>

    <!--
        webervice
    -->
    <bean class="org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter">
        <property name="baseAddress" value="http://localhost:8888/"/>
    </bean>

</beans>